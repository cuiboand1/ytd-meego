#Outline/Abstract of Article for http://appdeveloper.intel.com/en-us/node/2406

**( nb: ROUGH DRAFT WORK IN PROGRESS)**

= Overview  = 

The youtube-direct for meego application integrates a number of
traditionally separate applications: a video recorder/still photo camera,
GPS integration and geotagging, combined with managing/uploading captured
media to Youtube-Direct sites. Organizations seeking public contribution by
"[http://gigaom.com/video/youtube-direct-abc7/ citizen journalists]" use
these sites to facilitate content collection from an increasing population
of video-enabled smart-phone users.

YTD-Meego represents an innovative use of the handheld platform as a
computational video camera, performing a unique combination of
functionality that wasn't possible prior to the confluence of cellular
networking integrated with handheld/touchscreen computer and video
camera. 

The implementation of the application is innovative, utilizing "Qt Quick"
technology for rapdid-prototyping dynamic, modern touch GUIs. Qt Quick and
QML is used to implement most of the functionality of this project,
utilizing prototype-based OOP in the !JavaScript language. However, there
are areas where plugins or native access to underlying platform
functionality is not available in QML. In these cases, "hybrid programming"
technique will be used, implemented in C++ using !QtMobility API, but
providing high-level !JavaScript calls for use by QML files.

This article describes the architecture and design decisions porting the
[http://youtube-direct.googlecode.com Youtube-Direct]
handheld application for the
[http://ytd-iphone.googlecode.com Iphone]
/
[http://ytd-android.googlecode.com Android] to
[http://meego.com MeeGo], using
Qt Quick/QML
for the UI, and additional C++ extensions for
handling HD video capture, geotagging, and uploading to a youtube-direct
enabled website. 
As http://ytd-meego.googlecode.com is a new project, part of the purpose of
this article is to solicit feedback, contributors and domain-expertise on
the architecture choices described.

= !YouTube Direct =

 [http://code.google.com/p/youtube-direct/wiki/ArchitectureOverview http://youtube-direct.googlecode.com/files/ytd_architecture_diagram.png]

http://code.google.com/p/youtube-direct/wiki/GettingStarted

Web Demo: http://ytd-demo.appspot.com/test.html

[http://ureport.abc7news.com http://nielsmayer.com/ytd/Abc7-UReport-SmallSize.png][http://ytd-android.googlecode.com http://ytd-android.googlecode.com/files/ytd-screenshot-sm.png]


= Related Work = 

The Maemo Linux platform for the Nokia N900 has several YouTube uploader
applications. These are not !YouTube direct clients, but do represent
existing applications that support mobile uploading of videos to !YouTube.

 * Nokia !YouTube uploader for Maemo/n900
  * http://store.ovi.com/content/39065?clickSource=publisher+channel
  * The YouTube Uploader allows you to directly upload videos to YouTube when using the Share functionality from the Camera (as a video recorder) or from the Media Player on your Nokia N900.   Video uploads only.

 * PixelPipe for Maemo/N900
  *  We allow upload directly to the N900 camera and gallery applications to allow for effortless publishing.
  *  Background uploads! Once you’ve started an upload(s) it’ll go into a queue and deliver your media while your N900 is available and connected via an internet connection.
  *  Use N900′s Tag Cloud to send to specific services at the time of upload. Just include the service name with an @prefix or create your own custom groups with our Routing Tags feature.
  * http://www.youtube.com/watch?v=9TO--oQH9lk
  * http://blog.pixelpipe.com/2009/10/17/enabling-the-nokia-n900-to-the-social-web-with-pixelpipe/

== Overlap with Maemo 5 and !MeeGo 1.2 Sharing Framework ==

The Nokia YouTube uploader application mentioned above uses the platform
sharing facilities from Maemo.  There is also significant overlap between
ytd-meego and upcoming !MeeGo 1.2 infrastructure's "Sharing Framework." As
mentioned in http://wiki.meego.com/Architecture#Upcoming_Features , the
"Sharing framework provides a unified API for sharing files via, e.g., BT,
email, web services. It includes webupload engine and an API for transfer
UI." Similar overlap exists with authentication, in that the sharing framework has
"Full integration with
[http://gitorious.org/accounts-sso/pages/Overview_of_accounts_framework Accounts] and
[http://gitorious.org/accounts-sso/pages/Home Single Sign-on]
in !MeeGo.com."

The predecessor
[http://wiki.maemo.org/Documentation/Maemo_5_Developer_Guide/Architecture/Imaging_and_Sharing Maemo Sharing Framework]
provides media uploading to a variety of services:

 [http://wiki.maemo.org/images/0/0b/SharingAccounts.png]

The Maemo sharing GUI allows for any media captured on the device to be
selected and reliably uploaded to any provider that implements a
[http://wiki.maemo.org/Documentation/Maemo_5_Developer_Guide/Using_Data_Sharing/Sharing_Plug-in sharing plugin]:

 [http://wiki.maemo.org/images/4/49/SharingDialogInterface.png]

In the future, a well integrated youtube-direct "sharing plugin" written
for the !MeeGo Sharing Framework could subsume the functionality of
ytd-meego: allowing arbitrary camera/video apps to output media for
sharing, and allowing the sharing framework to handle the particulars of
uploading that media to a given internet sharing service.

Perhaps a "2.0" version of YTD-!MeeGo could be implemented as a custom
plugin for the !MeeGo Sharing Framework, assuming metadata such as
geotagging and notations are appropriately added to captured media. The
"assignment sheet" from youtube-direct sites is a dynamic source of "tags"
that the user must select and apply to the uploaded media as well. The
framework provides the following features to the handset platform:

 * [http://bugs.meego.com/show_bug.cgi?id=8179 FEATURE: Share UI: Unified entry point to select a destination]
  * Share UI that provides unified method for sharing different types of objects:
   # File paths
   # Tracker IRIs for file-backed ontologies
   # Data URL-encoded objects (RFC 2397)
  * Displays sharing plugins supported by Web upload engine
  * Provides flexibility in destination methods implementation, by allowing multiple sharing methods per plugin and methods to dynamically change during execution
  * Provides full integration with Accounts and Single Sign-on in !MeeGo.com 

 * [http://bugs.meego.com/show_bug.cgi?id=8180 FEATURE: Share: Web Upload Engine]
  * Web Upload Engine that provides unified processing of uploads, including:
   # Upload job queues
   # Resizing of still images
   # Metadata removal/replacement for images and videos
   # Upload recovery after crashes/restart of the device
   # Optional: video re-encoding
  * Provides reference share plugins for Facebook, YouTube, Picasa and Email
  * Full integration with Accounts and Single Sign-on in !MeeGo.com
  * Process separation for upload plugins and integrated with Security Framework 

 * [http://bugs.meego.com/show_bug.cgi?id=8181 FEATURE: Transfer UI: Common transfer management]
  * Transfer UI that provides integrated transfer visualization for all types of transfers:
   # Uploading content to social networks (such as Facebook)
   # Sharing to other devices (e.g. via Bluetooth)
   # Downloading content via different applications (e.g. Browser, Feeds)
   # Synchronizations (e.g. email, contacts, calendar)
  * Transfer UI provides common actions for all types of transfers
  * Transfer history preservation in Tracker; to ensure easy way to establish relationship between services and data and enablers for relevancy tracking

= GUI Technology: Qt Quick and QML = 

== Declarative GUIs and QML ==

== Hybrid Programming in C++ and QML == 

== GUI Components in Qt Quick == 

Qt Quick and QML don't provide a "widget" set in the traditional sense. If
one wants to develop with a certain look and feel, that is to be embodied
in the widget set itself, rather than being a part of Qt Quick or QML. This
flexibility can be problematic for rapid prototyping because there's no
"one right way to do things" and there are few reusable components or
patterns to help developers started.

A public project,
[https://projects.forum.nokia.com/colibri Qt Quick Colibri]
is designed to provide reusable UI components suitable for
cross-platform use on Symbian, Maemo, Meego and Windows/Mac/Linux desktop
environments. It is designed to get developers started
with cross-platform Qt Quick / QML application development. Colibri
currently includes basic components such as buttons, scrollbars, and
sliders, and a few more advanced ones like histograms and album carousel.

In the future, correct "native" and platform-specific look-and-feel will be
provided by
[http://developer.qt.nokia.com/wiki/Qt_Quick_Components Qt Quick Components],
which will bring cross platform components to QML, as an official Nokia
funded project to provide a consistent "native user experience" on Nokia
mobile platforms.

YTD-Meego will use whatever components, probably from Colibri, that will
help get the project off the ground as rapidly as possible, with the least
amount of code. The GUI needs of the YTD-Android application are
rudimentary "data browsers" combined with the usual buttons, menus,
etc. The data structures in YTD-Meego are designed to allow easy
presentation via preexisting
[http://doc.qt.nokia.com/4.7-snapshot/qdeclarativemodels.html QML Declarative Data models],
such as:

 * [http://doc.qt.nokia.com/4.7-snapshot/src-imports-folderlistmodel.html Folder List Model]

 [http://doc.qt.nokia.com/4.7-snapshot/images/declarative-folderlistmodel.png]

 * [http://doc.qt.nokia.com/4.7-snapshot/qml-xmllistmodel.html XML List Model]

 [http://doc.qt.nokia.com/4.7-snapshot/images/qml-xmllistmodel-example.png]

 * [http://doc.qt.nokia.com/4.7-snapshot/qml-listmodel.html QML List Model]

 [http://doc.qt.nokia.com/4.7-snapshot/images/listmodel.png

 * [http://doc.qt.nokia.com/4.7-snapshot/qml-visualitemmodel.html Visual Item Model]

 [http://doc.qt.nokia.com/4.7-snapshot/images/visualitemmodel.png]

= Platform and Hardware Overview =

The following diagram describes the
[http://wiki.maemo.org/Documentation/Maemo_5_Developer_Guide/Architecture/Multimedia_Domain Nokia n900 Maemo "Multimedia Domain"],
and should translate, roughly, to !MeeGo on the same platform:

 [http://wiki.maemo.org/images/thumb/5/56/OMAP_architecture.png/800px-OMAP_architecture.png]

http://meego.com/developers/meego-architecture/meego-architecture-domain-view
describes !MeeGo's "Multimedia domain": providing audio and video playback,
streaming, and imaging functionality to the system. It handles retrieval,
demuxing, decoding and encoding, seeking of audio and video data. It
includes the following subsystems:

 * Imaging and Video Adaptation - Platform specific codecs and containers for GStreamer
 * Camera Adaptation - Platform specific codecs and containers for GStreamer. Adaptation interface is !CameraBin.
 * UPnP - Universal Plug and Play provides a UPnP stack, the UPnP profile for audio and video.
 * Gstreamer - GStreamer, through its plugins, provides playback, streaming, and imaging functionality to the system.
 * Audio Adaptation - Platform specific modules for !PulseAudio
 * Pulse Audio - The audio subsystem handles audio inputs, post and pre processing, and outputs in a system. The purpose is to provide a proxy between audio applications and audio hardware.

The source code for these components is located at http://meego.gitorious.org/maemo-multimedia .

== Audio Subsystem ==

The audio subsystem is depicted in the following diagram from
[http://linuxplumbersconf.org/2009/slides/Jyri-Sarha-audio_miniconf_slides.pdf Jyri Sarha's presentation "Practical Experiences from Using Pulseaudio in Embedded Handheld Device"]
from the recent Linux Plumber's Conference:

 [http://nielsmayer.com/meego/N900-Pulseaudio-Configuration.png]

== Video and Camera Subsystem == 

The video subsystem, Gstreamer and Camera adaptation diagaram goes here.

== Meego Policy Framework ==

Marco Ballesio's,
[http://conference2010.meego.com/session/policy-framework-flexible-way-orchestrate-multiple-functionalities-meego-devices Policy Framework: A Flexible Way To Orchestrate Multiple Functionalities On MeeGo Devices]
from the !MeeGo 2010 conference outlines the role of the !MeeGo
[http://wiki.meego.com/images/Meego-policy-framework-developer-guide.pdf "Policy Framework"]:

 Functionalities like phone, camera, media player or navigator are often combined in !MeeGo devices. Each of them corresponds to a device mode and defines thus an expected behavior pattern. !MeeGo devices are expected to behave according to an active device mode and, as a consequence, the behavior of applications can be device mode dependent. The Policy Framework isolates and offloads as much as possible the mode based logic from the applications, making porting of mainstream desktop applications easy. The offloaded logic includes arbitration of media resource usage, management of media streams (routing, audio muting etc) and assignment of adequate resources in terms of memory and scheduling priority. The Policy Framework also isolates and offloads the HW adaptation from the applications and implements implicit, device mode dependent actions to handle events like calls or messages, improving the end-user-experience on handsets or other devices with slower user interaction mechanisms.

Still to be determined: how would ytd-meego interact with this Policy
Framework on a handset. For example: what happens if a phone call comes in
while you're shooting video? What forms of notifications, or
application-switching, are allowed while ytd-meego is being used? Will using
!QtMobility API automatically make this application compliant?

= Other Meego Platform "Middleware" =

== Tracker Subsystem ==

Tracker provides indexing, meta-data extraction, and search capabilities
for a variety of data types, including media files, and document. This API should be used for storing captured media

Note that the Tracker subsystem is also used by the upcoming Meego 1.2
Sharing Framework: e.g. "Transfer history preservation in Tracker; to
ensure easy way to establish relationship between services and data. See
for details, see [http://bugs.meego.com/show_bug.cgi?id=8181 FEATURE: Transfer UI: Common transfer management]
[http://bugs.meego.com/show_bug.cgi?id=8179 FEATURE: Share UI: Unified entry point to select a destination].

TODO: What is Qt API for this? 

== Geoclue Subsystem ==

MeeGo provides GeoClue for location services such as GPS, GSM Cell and Wifi
Network.

TODO: What is Qt API for this??

= Developing for N900 Camera Component =

As the !MeeGo Handset UX platform is under development, some of the media
infrastructure needed by this project is incomplete and not in a usable
state for application developers. In particular, camera functionality and
video recording will not be available until !MeeGo 1.2, to be released April
2011. There are a number of issues delaying camera integration on !MeeGo,
which were clarified in IRC by the N900 hardware adaptation lead Teemu
Tuominen:

     Tuesday, December 14, 2010 11:47:01 pm #meego: theodor:
     currently, the differences in kernel level are ... delaying camera
     integration.. since we have selected to support new architecture that
     cannot be accepted by meego reference kernel due its partly
     experimental.... To fully featurize camera in N900, !MeeGo needs
     components that used to be closed binaries in Maemo side. I assume a
     bunch of 3rdParty agreements needs to be dealt differently with !MeeGo,
     and can only hope that this is ongoing work.

The status of camera and GPS functionality on the n900 were discussed on
12/16/10 meeting on Nokia N900 Hardware Adaptation:

 * http://trac.tspre.org/meetbot/meego-meeting/2010/meego-meeting.2010-12-16-08.00.html
 * http://trac.tspre.org/meetbot/meego-meeting/2010/meego-meeting.2010-12-16-08.00.log.html

The camera features needed by YTD-!MeeGo that are under implementation for !MeeGo 1.2
include:

 * [http://bugs.meego.com/show_bug.cgi?id=5461 FEATURE: Camera 
  * A Camera application is required to capture still images and record videos with the device.  

 * [http://bugs.meego.com/show_bug.cgi?id=2743 FEATURE: Camera subsystem]
  * !MeeGo to provide [http://linux.bytesex.org/v4l2/ V4L2] for Camera subsystem  
  * Components are required on the kernel side:
   * Media controller core
   * Primary and secondary sensor drivers (et8ek8 and smia-sensor)
   * Flash and lens controller drivers (adp1653 and ad5820)
   * OMAP3 ISP driver (isp-mod)
   * OMAP34xx camera driver (omap34xxcam)
  * Available at http://gitorious.org/omap3camera/mainline

 * [http://bugs.meego.com/show_bug.cgi?id=7623 FEATURE: camerabin support in GStreamer]
  * still image capture with
   * arbitrary post processing
   * zooming
   * various resolutions
  * 3A (autofocus, autowhitebalance and autoexposure)
   * locking 3A settings
  * viewfinder with
   * arbitrary post processing
  * videocapture with
   * arbitrary post processing
   * zooming
   * various resolutions

The above open-source "camera application" code will be the basis for the
"camera" parts of YTD-direct, when it is available for use. Alternately,
the "declarative camera example" from !QtMobility 1.2 is a good basis for
the "camera control GUI" part of YTD-meego and it's implemented in QML:

 [http://doc.qt.nokia.com/qt-mobility-snapshot/images/qml-camera.png]

The above is created by the QML code:
 * http://doc.qt.nokia.com/qt-mobility-snapshot/declarative-camera-declarative-camera-qml.html
But there's also C++ and more:
 * http://doc.qt.nokia.com/qt-mobility-snapshot/declarative-camera.html .

= Developing the Web Component =

As the camera component will not be ready until April 2011 1.2 release, the
web component of YTD-meego will be given priority, as that can be evaluated
within the existing !MeeGo 1.1 handset. The goal will be to use as much
!QtQuick as possible in this phase of the project, and using C++ components
only as necessary, e.g for performance reasons, or because no QML
implementation exists. The second phase of the project, involving
integrating the camera and video recording features, will likely involve
hybrid QML/C++ programming. The first phase will be "rapid prototyping"
style development, using high-level "Qt Quick" functionality provided by
QML and modern dynamic programming provided by its !JavaScript language.

== Resumable Uploading == 

One of the issues with a youtube-direct client, noted in private comment by
Jarek Wilkiewicz of !YouTube, is that the error&retry logic in resumable
uploads need be robust: uploading large files while on the move, over flaky
and shifting networks is nontrivial.  This is handled by the the Youtube
API for resumable uploads (
http://code.google.com/intl/ja/apis/youtube/2.0/developers_guide_protocol_resumable_uploads.html
). YTD-meego must work with this API and provide the retry and
partial-upload logic that is robust in the face of networking challenges.

http://code.google.com/apis/youtube/articles/youtube_mobileresources.html#uploading

 For mobile applications, direct resumable uploading is the most reliable choice since it enables an application to gracefully recover from connectivity failures and resume an upload from the point of failure. YouTube’s resumable uploading protocol leverages the HTTP 1.1 Content-Range/Range mechanism to transfer videos in chunks and, in the event of an interruption, to identify the number of bytes that were successfully transferred.
 While the actual video content is the most important component in an upload, video metadata is an integral part of the process since that metadata lets users locate videos in search and also enables other features described later in this article. In addition to common elements like a category, description, and title, mobile applications can easily include geolocation data from the phone’s GPS device. These data let you provide location-based search or to plot video locations on a map. For video upload applications seeking to minimize user interaction, zero-metadata uploads are another option and more information about that is available from this Google I/O talk.

== Authentication and Access Control == 
 
http://code.google.com/apis/youtube/articles/youtube_mobileresources.html#security

Video uploads as well as any other operations that modify or write data
require authorization, which is done through an authentication token
submitted in the API request.
[http://code.google.com/apis/youtube/2.0/developers_guide_protocol_clientlogin.html# ClientLogin]
is the simplest method to use for mobile applications. For example, the YTD-Android application, uses the
[http://developer.android.com/reference/android/accounts/AccountManager.html Android AccountManager]
to  obtain authentication tokens. An alternative and preferred standard is
[http://code.google.com/apis/youtube/2.0/developers_guide_protocol_oauth.html OAuth]
, for which http://gdata-java-client.googlecode.com/ is an example Java client.

An example OAuth implementation using QML can be found at 
http://gitorious.org/qt-qml-demo-playground/qt-qml-demo-playground/trees/master/twitter-oauth for example:
http://gitorious.org/qt-qml-demo-playground/qt-qml-demo-playground/blobs/master/twitter-oauth/TwitterCore/OAuth.js
http://gitorious.org/qt-qml-demo-playground/qt-qml-demo-playground/blobs/master/twitter-oauth/TwitterCore/OAuth.qml

= QML Implementation Details =

The web component of the app will be implemented entirely in QML, using Youtube-Direct's JSON API: 
 * http://code.google.com/p/youtube-direct/wiki/YTDAdminJSONAPI
  * In YTD v2.0, the admin backend is complemented with a JSON-RPC API that enables you to fetch all the data relating to assignments, submissions and configuration programmatically.
  * The admin API is based on the JSON-RPC protocol format. It is essentially a REST-ful POST request with a JSON payload. For more information on JSON-RPC - http://en.wikipedia.org/wiki/JSON-RPC.

http://bugreports.qt.nokia.com/browse/QTBUG-12117 suggests a JSON data
model for QML suggests a "design pattern" as workaround:

     It would be very convenient to have a JSON data model to use with QML's
     list view elements, instead of emulating a model using !XMLHttpRequest,
     regular !JavaScript JSON support and !ListModel. For example:
{{{
     Item {
         ListModel { id: listmodel }
         onCompleted: {
             var xhr = new XMLHttpRequest;
             xhr.open("GET", "http://service.com/api");
             xhr.onreadystatechange = function() {
                 if (xhr.readyState == XMLHttpRequest.DONE) {
                     var a = JSON.parse(xhr.responseText);
                     for (var b in a) {
                         var o = a[b];
                         listmodel.append({name: o.name, url: o.url});
                     }
                 }
             }
             xhr.send();
         }
     }
}}}

The above pattern is an example of how the interface to the !YouTube Direct
assignment feed in YTD-Meego could be implemented.  Essentially, an
assignment feed is an RSS feed. An example of an Qt Quick application using
such a feed is a
[https://projects.forum.nokia.com/QtQuickTwitterExample Qt-Quick "twitter' client]
.  This constructs a data model that can be browsed by the
QML "XML List Model" introduced above:
[https://projects.forum.nokia.com/QtQuickTwitterExample/browser/twitter/content/TwitterModel.qml QtQuickTwitterExample Data Model]
displaying the data present in the RSS in a GUI:

 [https://projects.forum.nokia.com/QtQuickTwitterExample/raw-attachment/wiki/WikiStart/Twitter-listview1.png]


A similar integration of QML models and JSON/RPC data from a webserver is
the XBMC Remote for the [http://xbmc.org/ X Box Media Center], which itself
has already been [ http://www.madeo.co.uk/?page_id=605 ported to !MeeGo]:

 * http://gitorious.org/xbmc-qml-remote 
 * http://gitorious.org/xbmc-qml-remote/pages/Home

 [http://web2.0-apps.de/fabian/xbmc/screenshot/album.jpeg]

Some code examples from that app doing JSON/RPC entirely within QML:

/home/npm/youtube-direct/xbmc-qml-remote/player.js

{{{
Player.prototype.cmd = function(cmd, param) {
        var doc = new XMLHttpRequest();
        doc.onreadystatechange = function() {
                if (doc.readyState == XMLHttpRequest.DONE) {
                        //console.log(doc.responseText);
                }
        }

        doc.open("POST", "http://"+$().server+":" + $().port + "/jsonrpc");
        var str = '{"jsonrpc": "2.0", "method": "'+this.type+'Player.'+cmd+'",';
        if (param) {
                str += param + ","
        }
        str += ' "id": 1}';
        console.log(str);
        doc.send(str);
        return;
}
}}}

/home/npm/youtube-direct/xbmc-qml-remote/library.js

{{{
Library.prototype.loadMovies = function () {
        var doc = new XMLHttpRequest();
        doc.onreadystatechange = function() {
                if (doc.readyState == XMLHttpRequest.DONE) {
                        //console.log(doc.responseText);

                        var result = JSON.parse(doc.responseText).result;
                        var movies = result.movies;
                        for (var i = 0; i < movies.length; i++){
                                //console.log(movies[i].thumb)
                                var thumb = "http://"+$().server+":" + $().port + "/images/DefaultAlbumCover.png";
                                if (movies[i].thumbnail) {
                                        thumb = "http://192.168.0.11:8080/vfs/" + movies[i].thumbnail;
                                }

                                movieModel.append({"id": movies[i].movieid, "name": movies[i].label, "thumb": thumb, "genre":  movies[i].genre, "duration": movies[i].runtime, "rating": movies[i].rating});
                        }
                }
        }

        doc.open("POST", "http://"+$().server+":" + $().port + "/jsonrpc");
        var str = '{"jsonrpc": "2.0", "method": "VideoLibrary.GetMovies", "params": { "start": 0, "fields": ["genre", "director", "trailer", "tagline", "plot", "plotoutline", "title", "originaltitle", "lastplayed", "showtitle", "firstaired", "duration", "season", "episode", "runtime", "year", "playcount", "rating"] }, "id": 1}';
        doc.send(str);

        return;
 }
}}}

= Future work enabled by a "Video 2.0" platform =

The new generation of hybrid video/computing platform such as the Nokia
N900 or N8 enable a whole different world of applications. Stanford
University's
[http://www-graphics.stanford.edu/papers/fcam/ FCam Project ]
claims applications of "[http://www-graphics.stanford.edu/projects/camera-2.0/ Camera 2.0]"
include:
 "high dynamic range imaging, flash-noflash imaging, coded aperture and coded exposure imaging, photography under structured illumination, multi-perspective and panoramic stitching, digital photomontage, all-focus imaging, and light field imaging."

The !YouTube Direct Application on a handset represents the first steps
towards "Video 2.0."  With the veracity of news and video footage always in
question, such platforms can make use of existing platform cryptography
libraries which can be applied to digitally signing an embedded timecode,
geotags and other information embedded in the video. Using cryptography, an
initial "chain of custody" on the video could be established, such as a
specific certificate issued by the news organization that ensures the
platform/software/submitter of the information are not forgeries. By
watermarking digital signatures of GPS geotags and a monotonically
increasing timecode into the video, edits, photoshopping and omissions to
that video become "provable." These are innovative uses of video that can
only be enabled by having a complete and robust mobile computing and
telecommunication platform like Meego built into the "video camera"

= Conclusion =

Youtube-direct on Meego is cool and innovative. Please add your comments,
in the comments section of this article, and if you have something to
contribute to the project, please volunteer. There's a lot of code to write
and a lot of different components to get working and test on this
promising, but evolving platform.

